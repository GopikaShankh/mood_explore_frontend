{"ast":null,"code":"var _jsxFileName = \"/home/gopika/Documents/mood-explore/mood-explore/client/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MoodForm from \"./MoodForm\";\nimport { Link } from \"react-router-dom\";\nimport './HomePage.css';\nimport Navbar from \"./navbar\";\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [moods, setMoods] = useState([]);\n\n  // Fetch moods from the backend\n  const fetchMoods = async () => {\n    const token = localStorage.getItem('token');\n    if (!token) return;\n    try {\n      const decodedToken = jwtDecode(token);\n      const userId = decodedToken.id;\n      const response = await axios.get(`http://localhost:8080/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      // setMoods(response.data);\n    } catch (error) {\n      console.error(\"Error fetching moods:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchMoods();\n  }, []);\n\n  // Add a new mood\n  const addMood = async mood => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return;\n    }\n    const decodedToken = jwtDecode(token);\n    const userId = decodedToken.id;\n    try {\n      const response = await axios.post(\"http://localhost:8080/\", {\n        user_id: userId,\n        mood: mood.mood,\n        message: mood.message // Ensure message is included\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('Mood added:', response.data);\n      setMoods([...moods, response.data]);\n      fetchMoods();\n    } catch (error) {\n      console.error(\"Error adding mood:\", error);\n      if (error.response) {\n        if (error.response.data) {\n          alert(error.response.data.error || 'An error occurred while logging your workout.');\n          console.log(error.response.data);\n          console.log(error.response.status, error.response.data.error || 'An error occurred while logging your workout.');\n        } else {\n          alert('An error occurred: ' + error.message);\n        }\n      } else {\n        alert('Network error or server not reachable. Please try again.');\n      }\n    }\n  };\n\n  // Get the latest mood\n  const latestMood = moods.length > 0 ? localStorage.setItem(moods[0]) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"bg\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MoodForm, {\n      onAddMood: addMood\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Current Mood\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), latestMood ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"mood\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Mood: \", latestMood.mood]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Message: \", latestMood.message]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Date: \", new Date(latestMood.date).toLocaleString()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Suggestions:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"suggestions\",\n            children: latestMood.suggestions.map((suggestion, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: suggestion\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }, this)]\n        }, latestMood._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No mood to display\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"JVKzjhX8h3SP8t7rweTnWo8V/R0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","axios","MoodForm","Link","Navbar","jwtDecode","jsxDEV","_jsxDEV","Dashboard","_s","moods","setMoods","fetchMoods","token","localStorage","getItem","decodedToken","userId","id","response","get","headers","Authorization","error","console","addMood","mood","post","user_id","message","log","data","alert","status","latestMood","length","setItem","children","fileName","_jsxFileName","lineNumber","columnNumber","onAddMood","className","Date","date","toLocaleString","suggestions","map","suggestion","index","_id","_c","$RefreshReg$"],"sources":["/home/gopika/Documents/mood-explore/mood-explore/client/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport MoodForm from \"./MoodForm\";\nimport { Link } from \"react-router-dom\";\nimport './HomePage.css';\nimport Navbar from \"./navbar\";\nimport { jwtDecode } from 'jwt-decode'; \nconst Dashboard = () => {\n    const [moods, setMoods] = useState([]);\n\n    // Fetch moods from the backend\n    const fetchMoods = async () => {\n        const token = localStorage.getItem('token');\n        if (!token) return;\n\n\n        try {\n            const decodedToken = jwtDecode(token);\n            const userId = decodedToken.id;\n            const response = await axios.get(`http://localhost:8080/${userId}`, {\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n            // setMoods(response.data);\n        } catch (error) {\n            console.error(\"Error fetching moods:\", error);\n        }\n    };\n\n    useEffect(() => {\n        fetchMoods();\n    }, []);\n\n    // Add a new mood\n    const addMood = async (mood) => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          return;\n        }\n\n        const decodedToken = jwtDecode(token); \n        const userId = decodedToken.id;\n\n        try {\n            const response = await axios.post(\"http://localhost:8080/\", {\n                user_id: userId,\n                mood: mood.mood,\n                message: mood.message // Ensure message is included\n            },{\n                headers: {\n                  Authorization: `Bearer ${token}`,\n                },\n            });\n            console.log('Mood added:', response.data);\n            setMoods([...moods, response.data]);\n            fetchMoods();\n        } catch (error) {\n            console.error(\"Error adding mood:\", error);\n            if (error.response) {\n                if (error.response.data) {\n                  alert(error.response.data.error || 'An error occurred while logging your workout.');\n                  console.log(error.response.data);\n                  console.log(error.response.status, error.response.data.error || 'An error occurred while logging your workout.');\n                } else {\n                  alert('An error occurred: ' + error.message);\n                }\n              } else {\n                alert('Network error or server not reachable. Please try again.');\n              }\n        }\n    };\n\n\n    // Get the latest mood\n    const latestMood = moods.length > 0 ? localStorage.setItem(moods[0]) : null;\n\n    return (\n        <div id=\"bg\">\n            <Navbar />\n            <MoodForm onAddMood={addMood} />\n            <div className=\"result-container\">\n                <h2>Current Mood</h2>\n                {latestMood ? (\n                    <ul className=\"mood\">\n                        <li key={latestMood._id}>\n                            <h3>Mood: {latestMood.mood}</h3>\n                            <p>Message: {latestMood.message}</p>\n                            <p>Date: {new Date(latestMood.date).toLocaleString()}</p>\n                            <h4>Suggestions:</h4>\n                            <ul className=\"suggestions\">\n                                {latestMood.suggestions.map((suggestion, index) => (\n                                    <li key={index}>{suggestion}</li>\n                                ))}\n                            </ul>\n                        </li>\n                    </ul>\n                ) : (\n                    <p>No mood to display</p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}